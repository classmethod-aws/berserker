// -*- coding: utf-8; mode: groovy -*-

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
	}
}

version = currentVersion
group = "jp.classmethod.example"
ext.artifactId = "berserker"
ext.defaultEncoding = "UTF-8"

if (hasProperty('env') == false) { ext.env = 'personal' }
apply from: "env/${env}.gradle"


apply plugin: "java"
apply plugin: "spring-boot"

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(AbstractCompile) each {
	it.options.encoding = ext.defaultEncoding
}


// ======== libraries ========
repositories {
	mavenCentral()
	maven { url "http://maven.xet.jp/release" } // for spring-data-mirage
}

dependencies {
	// spring
	compile "org.springframework.boot:spring-boot-starter:$springBootVersion"
	compile "org.springframework.boot:spring-boot-starter-jdbc:$springBootVersion"
	compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
	compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
	compile "org.springframework.data:spring-data-mirage:$springDataMirageVersion"
	
	// loggers
	compile "org.slf4j:slf4j-api:$slf4jVersion"
	compile "org.slf4j:jul-to-slf4j:$slf4jVersion"
	compile "ch.qos.logback:logback-classic:$logbackVersion"

	// other
	compile "org.projectlombok:lombok:$lombokVersion"
	compile "mysql:mysql-connector-java:$mysqlVersion"
	compile "org.flywaydb:flyway-core:$flywayVersion"
	compile "com.amazonaws:aws-java-sdk-sqs:$awsJavaSdkVersion"
	compile "javax.mail:mail:$javaMailVersion"
	
	// testing
	testCompile "junit:junit:$junitVersion"
	testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
	testCompile "org.mockito:mockito-core:$mockitoCoreVersion"

}

// ======== wrapper ========
task wrapper(type: Wrapper) {
	gradleVersion = "2.12"
}


// ======== environment ========
tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
	project.getSystemProperties().each { key, value ->
		systemProperty key, value
	}
}

Map<String, String> getSystemProperties() {
	def prop = [
		'JDBC_CONNECTION_STRING':  berserker.local.database.connectionString,
		'DB_USERNAME':             berserker.local.database.user,
		'DB_PASSWORD':             berserker.local.database.password,
		'spring.profiles.active':  berserker.local.springProfile,
	]
	if (file(berserker.local.logbackConfigurationFile).exists()) {
		prop.put('logging.config', berserker.local.logbackConfigurationFile)
	}
	return prop
}
